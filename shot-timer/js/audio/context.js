let audioCtx=null,outputDeviceId=null;export async function initAudio(){if(!audioCtx)try{audioCtx=new(window.AudioContext||window.webkitAudioContext)({latencyHint:"interactive"})}catch(t){return console.warn("initAudio: could not create AudioContext",t),void(audioCtx=null)}const t=document.getElementById("speakerSelect");if(t)if(audioCtx&&audioCtx.destination&&"function"==typeof audioCtx.destination.setSinkId)try{t.innerHTML="",outputDeviceId=t.value||null}catch(t){console.warn("initAudio: could not prepare speakerSelect:",t)}else t.innerHTML="",t.style.display="none",outputDeviceId=null}export function getAudioContext(){return audioCtx}export async function ensureAudioRunning(){if(audioCtx)try{"function"==typeof audioCtx.resume&&"suspended"===audioCtx.state&&await audioCtx.resume()}catch(t){console.warn("ensureAudioRunning failed",t)}}export function supportsSetSinkId(){return!(!audioCtx||!audioCtx.destination||"function"!=typeof audioCtx.destination.setSinkId)}export async function setOutputDevice(t){if(audioCtx&&audioCtx.destination&&"function"==typeof audioCtx.destination.setSinkId)try{await audioCtx.destination.setSinkId(t),outputDeviceId=t}catch(t){console.warn("setSinkId failed:",t)}else console.warn("setOutputDevice: setSinkId not supported on this platform; ignoring setOutputDevice request")}