import{getAudioContext}from"./context.js";import{getThreshold,getDebounceMs}from"../timer/config.js";let micStream=null,analyser=null,dataArray=null,shotCallback=null,lastShotTs=0,_suppressShots=!1,__initMicInProgress=!1;export function setShotCallback(e){const t=shotCallback;return shotCallback=e,t}export async function initMic(){if(micStream)return;if(__initMicInProgress)return void console.debug("initMic: already in progress");__initMicInProgress=!0;const e={audio:!0};console.debug("initMic: requesting microphone permission");try{if(!navigator.mediaDevices||"function"!=typeof navigator.mediaDevices.getUserMedia){console.error("initMic: navigator.mediaDevices.getUserMedia not available");const e=document.getElementById("status");if(e)try{setStatus("Microphone API not available.","error")}catch(t){e.textContent="Microphone API not available."}return}micStream=await navigator.mediaDevices.getUserMedia(e),console.debug("initMic: getUserMedia succeeded")}catch(e){console.error("getUserMedia failed in initMic:",e);const t=document.getElementById("status");if(t)try{setStatus("Could not access microphone.","error")}catch(e){t.textContent="Could not access microphone."}return}const t=getAudioContext();t||console.warn("initMic: no AudioContext available from getAudioContext()");let o=null;try{o=t.createMediaStreamSource(micStream)}catch(e){console.warn("initMic: createMediaStreamSource failed",e);try{micStream.getTracks().forEach(e=>{try{e.stop()}catch(e){}})}catch(e){}return void(micStream=null)}analyser=t.createAnalyser(),analyser.fftSize=256;const r=analyser.frequencyBinCount||128;dataArray=new Uint8Array(r),o.connect(analyser),console.debug("initMic: analyser created, fftSize=",analyser.fftSize,"bufferLen=",dataArray.length),__initMicInProgress=!1}export async function pollDetector(e){if(await initMic(),!analyser||!dataArray)return;try{analyser.getByteTimeDomainData(dataArray)}catch(e){return void console.error("analyser.getByteTimeDomainData failed:",e)}let t=0;for(let e=0;e<dataArray.length;e++){const o=dataArray[e]-128;t+=o*o}const o=Math.sqrt(t/dataArray.length),r=document.getElementById("rmsMeter");r&&(r.value=o);const a=document.getElementById("rmsValue");a&&(a.textContent=o.toFixed(2)),window&&window.console&&"function"==typeof console.debug&&console.debug("detector: rms=",o.toFixed(2),"threshold=",getThreshold());const n=getThreshold(),s=getDebounceMs();if(o>n&&e-lastShotTs>s)if(lastShotTs=e,_suppressShots)console.debug("detector: shot suppressed (Listen mode) at",e);else if("function"==typeof shotCallback)try{shotCallback(e,o)}catch(e){console.error("detector: shotCallback threw",e)}return o}export function setListenMode(e){_suppressShots=Boolean(e),console.debug("detector: setListenMode ->",_suppressShots)}export function stopMic(){try{if(micStream){try{micStream.getTracks().forEach(e=>{try{e.stop()}catch(e){}})}catch(e){}micStream=null}}catch(e){console.warn("stopMic: error stopping mic stream",e)}try{analyser=null,dataArray=null}catch(e){}_suppressShots=!1,lastShotTs=0,__initMicInProgress=!1,console.debug("detector: stopMic â€” microphone stream released")}