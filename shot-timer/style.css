/* style.css – minimal styling for the new layout */
/* Theme variables (light defaults) */
:root {
  --bg: #fafafa;
  --text: #222222;
  --logo-max: 300px; /* default max height for inline logo (increased) */
  --logo-max-desktop: 700px; /* desktop max height (increased) */
  --logo-min: 28px; /* minimum sensible inline logo height */
  --muted: #555555;
  --panel-bg: #ffffff;
  --primary: #0066cc;
  --accent: #28a745;
  --danger: #dc3545;
  --danger-shadow: rgba(220,53,69,0.25);
  --danger-shadow-strong: rgba(220,53,69,0.32);
  --table-alt: #f0f0f0;
  --status-bg: #f3f6ff;
  --status-text: #0b3b7b;
  --status-success-bg: #e8f7ec;
  --status-success-text: #1b6b2b;
  --status-error-bg: #fff0f0;
  --status-error-text: #7a0b0b;
  --button-text: #ffffff;
  /* Disabled button colors (light theme) */
  --btn-disabled-bg: #e6e6e6;
  --btn-disabled-text: #6b6b6b;
}

/* Allow explicit override from JS: html[data-theme="dark"] will force dark variables
   This takes precedence when the script sets document.documentElement.setAttribute('data-theme','dark') */
html[data-theme="dark"], :root[data-theme="dark"] {
  --bg: #0b0b0d;
  --text: #e8e8e8;
  --muted: #bdbdbd;
  --panel-bg: #111214;
  --primary: #3b82f6;
  --accent: #10b981;
  --danger: #ef4444;
  --danger-shadow: rgba(239,68,68,0.25);
  --danger-shadow-strong: rgba(239,68,68,0.32);
  --table-alt: #161616;
  --status-bg: #0f1724;
  --status-text: #cfe8ff;
  --status-success-bg: #052e10;
  --status-success-text: #9be6b7;
  --status-error-bg: #331212;
  --status-error-text: #ffb4b4;
  --button-text: #0b0b0d;
  /* Disabled button colors (dark theme) */
  --btn-disabled-bg: #2a2a2a;
  --btn-disabled-text: #bdbdbd;
}

/* Respect system preference when no explicit choice made */
@media (prefers-color-scheme: dark) {
  :root {
    --bg: #0b0b0d;
    --text: #e8e8e8;
    --muted: #bdbdbd;
    --panel-bg: #111214;
    --primary: #3b82f6;
    --accent: #10b981;
    --danger: #ef4444;
  --danger-shadow: rgba(239,68,68,0.25);
  --danger-shadow-strong: rgba(239,68,68,0.32);
    --table-alt: #161616;
    --status-bg: #0f1724;
    --status-text: #cfe8ff;
    --status-success-bg: #052e10;
    --status-success-text: #9be6b7;
    --status-error-bg: #331212;
    --status-error-text: #ffb4b4;
    --button-text: #0b0b0d;
  /* Disabled button colors (prefers dark) */
  --btn-disabled-bg: #2a2a2a;
  --btn-disabled-text: #bdbdbd;
  }
}
body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI",
               Roboto, Helvetica, Arial, sans-serif;
  margin: 0 auto;
  padding: 1rem;
  max-width: 1100px;
  background: var(--bg);
  color: var(--text);
  -webkit-font-smoothing: antialiased;
}

h1 {
  text-align: center;
  margin-bottom: 1rem;
  clear: both; /* ensure heading sits on its own line below floated top-new */
  margin-top: 0.4rem;
}

.heading-wrap {
  /* Use flex so logo and heading are always centered and vertically stacked */
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
  clear: both;
  position: relative;
  z-index: 2;
  gap: 0.5rem;
}

/* Ensure the page header area clears floats so heading-wrap can sit centered */
.top-new, .top-theme-btn { position: relative; z-index: 3; }

/* Logo above the heading. Keep slightly narrower than the heading text. */
.logo-wrap {
  display: grid; /* stack logos in the same grid cell so they occupy layout height */
  place-items: center;
  margin-bottom: 0.6rem; /* gap between logo and heading */
  /* Keep the logo box compact and consistent across themes. Use an intrinsic
     size with a max-height so logos don't explode when container widths change. */
  width: auto;
}
.logo {
  display: block;
  grid-area: 1 / 1 / 2 / 2; /* stack logos in same grid cell */
  width: auto; /* allow natural aspect ratio */
  height: auto;
  /* Constrain visual size by height so different image aspect ratios behave
     consistently. Increase on larger screens for better balance. */
  min-height: 60px;
  max-height: var(--logo-max);
}
.light-logo,
.dark-logo,
.active-stage-logo {
  grid-area: 1 / 1 / 2 / 2;
  /* Ensure all logos use the same sizing rules above. Explicitly set
     width:auto so they scale by height constraint not by width percent. */
  width: auto;
  height: auto;
  opacity: 0;
  transition: opacity 300ms ease-in-out;
  will-change: opacity;
}

/* Show appropriate logo by fading opacity */
html[data-theme="dark"] .dark-logo { opacity: 1; }
html[data-theme="dark"] .light-logo { opacity: 0; }
html:not([data-theme="dark"]) .light-logo { opacity: 1; }
html:not([data-theme="dark"]) .dark-logo { opacity: 0; }

@media (prefers-color-scheme: dark) {
  /* If no explicit data-theme is set, prefer dark logo */
  :root:not([data-theme="dark"]) .dark-logo { opacity: 1; }
  :root:not([data-theme="dark"]) .light-logo { opacity: 0; }
}

@media (min-width: 900px) {
  /* Increase allowed logo height on desktop for better visual balance */
  /* desktop max uses variable so it's easy to tune */
  .logo { max-height: var(--logo-max-desktop); }
}

/* Inline SVG coloring: use currentColor so we can control via the color property
   of the container. Default: dark-on-light, light-on-dark. When active (running),
   make the logo vivid red. */
.svg-logo { color: var(--text); }
html[data-theme="dark"] .svg-logo { color: #fff; }
.svg-logo.active { color: var(--danger); }
/* Smooth color transition and subtle glow when active */
.svg-logo { transition: color 220ms ease, filter 220ms ease; display: block; width: auto; height: auto; /* use CSS variables for easy tuning */ max-height: var(--logo-max); min-height: var(--logo-min); opacity: 1 !important; visibility: visible !important; }
.svg-logo path { fill: currentColor !important; }
.svg-logo.active { color: var(--danger); filter: drop-shadow(0 6px 18px rgba(255,26,26,0.25)) drop-shadow(0 2px 6px rgba(255,26,26,0.12)); }

/* Prevent accidental text selection / tap highlight when interacting with the
   logo (double-tap used to cycle courses). Also ensure touch interactions
   are handled cleanly. Applies to heading and logo containers. */
.heading-wrap, .logo-wrap, .logo, .svg-logo, h1 {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-tap-highlight-color: transparent;
  touch-action: manipulation;
}

/* Prevent native double-tap-to-zoom on the logo element itself by disabling
   touch gestures there. This allows our double-tap handler to take over on iOS. */
.svg-logo {
  touch-action: none !important;
}

/* Stronger active-state override so the red active color and glow win in
   both light and dark themes (use !important to avoid specificity/order issues). */
html[data-theme="dark"] .svg-logo.active,
html:not([data-theme="dark"]) .svg-logo.active,
.svg-logo.active {
  color: var(--danger) !important;
  filter: drop-shadow(0 6px 20px rgba(255,40,40,0.30)) !important;
}

@media (min-width: 900px) {
  /* Allow the inline SVG to grow larger on wide screens to match .logo */
  /* desktop: use variable so it's easy to change */
  .svg-logo { max-height: var(--logo-max-desktop) !important; }
}

/* Countdown */
#display {
  /* responsive large countdown — scales from phones to desktops */
  font-size: clamp(2rem, 8vw, 5rem);
  text-align: center;
  margin: 1rem 0 1.25rem 0;
  font-weight: 700;
  line-height: 1;
}

/* Pre-start visual: make the clock red and slightly larger to mimic a rocket
   launch countdown. Applied via JS by adding the .prestart class to the #display. */
#display.prestart {
  color: var(--danger); /* use same red as the logo */
  text-shadow: 0 2px 8px var(--danger-shadow);
  transform: scale(1.06);
}

/* Post-finish visual countdown (2s) — red, prominent, and slightly larger
   than the normal display so users notice the auto-stop window. This is
   applied via JS by adding the .postfinish class to #display. */
#display.postfinish {
  color: var(--danger); /* same red as active logo */
  text-shadow: 0 3px 12px var(--danger-shadow-strong);
  transform: scale(1.08);
  font-weight: 900;
}

/* Sections – give a little vertical spacing */
section {
  margin: 1rem 0;
}

/* Labels – block layout for readability */
label {
  display: block;
  margin: 0.45rem 0;
}

.input-hint {
  margin: 0.25rem 0 0.6rem 0;
  color: var(--muted);
  font-size: 0.95rem;
}

/* UI zoom control: compact +/- buttons with a percent display */
.ui-zoom-control {
  display: inline-flex;
  align-items: center;
  gap: 0.4rem;
  margin-left: 0.5rem;
}
.ui-zoom-control button {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 2rem;
  height: 2rem;
  border-radius: 6px;
  border: none;
  cursor: pointer;
  font-size: 1.1rem;
}
.ui-zoom-control button:hover { filter: brightness(0.95); }
.ui-zoom-control #uiZoomValue { font-weight: 700; min-width: 3.2rem; text-align: center; display: inline-block; }

/* .ui-zoom-control buttons will pick up color/background from .btn-primary when applied */

/* Small visible note shown when the browser uses system audio output (no programmatic speaker selection) */
.system-output-note { margin-top: 0.35rem; font-size: 0.95rem; color: var(--muted); }

/* Small inline info icon (uses emoji by default, scales with font-size) */
.info-icon {
  display: inline-block;
  width: 1.1em;
  height: 1.1em;
  margin-right: 0.4rem;
  vertical-align: middle;
  line-height: 1;
  font-size: 1.02em; /* keeps emoji aligned with text */
}

.dismiss-note-btn {
  margin-left: 0.6rem;
  padding: 0.2rem 0.45rem;
  font-size: 0.9rem;
  border-radius: 6px;
  border: 1px solid rgba(0,0,0,0.08);
  background: transparent;
  cursor: pointer;
}
.dismiss-note-btn:hover { background: rgba(0,0,0,0.03); }

/* Dark-mode tweaks: make the dismiss button readable on dark backgrounds */
html[data-theme="dark"] .dismiss-note-btn {
  /* Use the main text color in dark mode (light) so the small button is readable */
  color: var(--text);
  border-color: rgba(255,255,255,0.12);
}
html[data-theme="dark"] .dismiss-note-btn:hover { background: rgba(255,255,255,0.04); }

/* Range value spans (the numbers next to sliders) */
span[id$="Value"] {
  margin-left: 0.5rem;
  font-weight: bold;
}

/* Buttons container */
.buttons {
  text-align: center;
  margin-top: 1rem;
}
button {
  padding: 0.6rem 1rem;
  margin: 0.35rem;
  font-size: 1rem;
  cursor: pointer;
  border: none;
  border-radius: 6px;
  touch-action: manipulation;
}

/* Transient visual state when a control is pressed programmatically
   (used by JS to provide immediate tactile feedback on Start/Stop clicks) */
button.pressed {
  transform: scale(0.98);
  filter: brightness(0.9);
  transition: transform 120ms ease, filter 120ms ease;
}

/* Disabled button appearance that works in both light and dark modes.
   Use both the :disabled pseudo-class and the `.disabled` helper class used by JS. */
button:disabled,
button.disabled {
  background: var(--btn-disabled-bg) !important;
  color: var(--btn-disabled-text) !important;
  cursor: not-allowed;
  box-shadow: none !important;
  filter: none !important;
  opacity: 1; /* keep full opacity but use the muted color variables */
}

/* Simple colour scheme */
#detectBtn    { background: var(--primary); color: #fff; }
#calibrateBtn { background: var(--accent); color: #fff; }
#startBtn     { background: var(--accent); color: #fff; }
/* Stop button (danger) — removed; styling kept only for historical reference */
/* #stopBtn removed from markup — no runtime styles required */

/* Active animation used for Start, Stop and Next to indicate activity/state
   (pulsing glow). Applied instead of a status message for Start/Stop. */
.btn-anim {
  animation: pulse-600 1200ms infinite ease-in-out;
  box-shadow: 0 0 0 0 rgba(255,255,255,0.0);
}
@keyframes pulse-600 {
  0% { transform: translateZ(0) scale(1); box-shadow: 0 0 0 0 rgba(0,0,0,0); }
  50% { transform: translateZ(0) scale(1.03); box-shadow: 0 8px 20px rgba(59,130,246,0.08); }
  100% { transform: translateZ(0) scale(1); box-shadow: 0 0 0 0 rgba(0,0,0,0); }
}

/* Shots table */
#shotsPanel {
  margin-top: 0.8rem; /* reduced gap between the hr and header */
  border-top: 1px solid rgba(0,0,0,0.08);
  padding-top: 0.6rem;
  overflow-x: auto; /* allow horizontal scroll on narrow screens */
  margin-bottom: 2.25rem; /* extra space so the footer doesn't sit tight against the table */
}
#shotsTable {
  width: 100%;
  border-collapse: collapse;
  display: table;
  table-layout: fixed;
  word-break: break-word;
}
#shotsTable th,
#shotsTable td {
  border: 1px solid rgba(0,0,0,0.12);
  padding: 0.4rem 0.6rem;
  text-align: center;
}
#shotsTable tbody tr:nth-child(even) {
  background: var(--table-alt);
}

/* Make the Shots detected header centered and ensure the count uses the same font style */
#shotsPanel h2 {
  text-align: center;
  margin-bottom: 0.5rem;
  font-weight: 700; /* keep header prominent */
}
#shotsPanel h2 #shotsSummaryCount {
  font-weight: inherit;
  font-size: inherit;
  font-family: inherit;
  color: inherit;
}

/* When the table has .hide-rms, hide the RMS column (both header and cells) */
#shotsTable.hide-rms th:nth-child(4),
#shotsTable.hide-rms td:nth-child(4) {
  display: none;
}

/* Highlight shots that are late or over the expected count */
.shot-warning { background: #ffecec !important; color: #7a0b0b; font-weight: 700; }

/* Dark‑mode support */
@media (prefers-color-scheme: dark) {
  body { background: #111; color: #eee; }
  #shotsTable th,
  #shotsTable td { border-color: #555; }
  #shotsTable tbody tr:nth-child(even) { background: #222; }
}

/* Status area (permission / device messages) */
.status {
  margin: 1rem 0;
  padding: 0.5rem 0.75rem;
  border-radius: 6px;
  background: var(--status-bg);
  color: var(--status-text);
  font-weight: 600;
  text-align: center;
}
.status.success { background: var(--status-success-bg); color: var(--status-success-text); }
.status.error   { background: var(--status-error-bg); color: var(--status-error-text); }
.hidden { display: none !important; }

/* Status details UI (diagnostics) */
.status-details {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 0.5rem;
  margin-top: 0.5rem;
}
.status-details pre {
  width: 100%;
  max-width: 800px;
  text-align: left;
  background: rgba(0,0,0,0.03);
  color: inherit;
  border-radius: 6px;
  padding: 0.5rem;
  overflow: auto;
}
/* Secondary button styling for details/retry/copy — visible on both themes */
.btn-secondary {
  background: transparent;
  color: inherit;
  border: 1px solid rgba(0,0,0,0.12);
  padding: 0.45rem 0.6rem;
  border-radius: 6px;
  cursor: pointer;
}
.btn-secondary:hover { filter: brightness(0.96); }
html[data-theme="dark"] .btn-secondary { border-color: rgba(255,255,255,0.08); }

/* Logo tip: wider, centered hint above the logo with a dismiss button */
.logo-tip {
  /* Make the tip much wider — span most of the viewport so it feels large and
     prominent. Center it relative to the viewport rather than the page container. */
  position: relative;
  left: 50%;
  transform: translateX(-50%);
  width: 96vw;
  max-width: none; /* allow full viewport width */
  margin: 0 0 0.75rem 0;
  padding: 0.6rem 1rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 0.75rem;
  border-radius: 8px;
  background: var(--panel-bg);
  color: var(--text);
  border: 1px solid rgba(0,0,0,0.06);
  box-shadow: 0 6px 18px rgba(0,0,0,0.04);
  box-sizing: border-box;
}
.logo-tip .btn-secondary { margin-left: 1rem; }

@media (max-width: 900px) {
  .logo-tip { max-width: calc(100% - 1rem); padding: 0.5rem; gap: 0.6rem; }
}

/* Tablet-specific tweak (iPad and similar): constrain the logo tip width,
   stop centering via absolute translate (so header buttons keep their place),
   and allow its content to wrap onto a second line. The button will move
   below the text when space is constrained so it doesn't push the top
   theme/reset buttons out of alignment. */
@media (min-width: 600px) and (max-width: 1024px) {
  .logo-tip {
    position: static !important;
    left: auto !important;
    transform: none !important;
    width: auto !important;
    max-width: 720px !important; /* reasonable max on wider tablets */
    margin: 0 auto 0.6rem auto !important;
    padding: 0.5rem 0.8rem !important;
    display: flex !important;
    flex-wrap: wrap !important; /* allow text to wrap to next line */
    align-items: center !important;
    justify-content: center !important;
    gap: 0.5rem !important;
    text-align: center !important;
  }
  .logo-tip > span { flex: 1 1 60% !important; min-width: 0 !important; white-space: normal !important; }
  .logo-tip .btn-secondary { margin-left: 0 !important; margin-top: 0.45rem !important; }
}

/* Dark mode tweak for logo-tip */
html[data-theme="dark"] .logo-tip {
  background: rgba(255,255,255,0.02);
  border-color: rgba(255,255,255,0.06);
  box-shadow: none;
  color: var(--text);
}

/* Fade animation for status messages. Uses .status-visible to trigger
   the opacity/translate transition. The JS helper adds/removes .hidden
   after the transition completes so display:none doesn't block the fade. */
.status { opacity: 0; transform: translateY(-6px); transition: opacity 240ms ease, transform 240ms ease; }
.status.status-visible { opacity: 1; transform: translateY(0); }

/* Tiny spinner to indicate scanning */
.spinner {
  display: inline-block;
  width: 1rem;
  height: 1rem;
  border: 2px solid rgba(0,0,0,0.1);
  border-top-color: rgba(0,0,0,0.6);
  border-radius: 50%;
  animation: spin 0.8s linear infinite;
  vertical-align: middle;
  margin-left: 0.5rem;
}
@keyframes spin { to { transform: rotate(360deg); } }

/* Increase font size for all non-heading elements by 50%.
   Use rem so headings (which already use rem) keep their specified sizes.
   This targets every element that is not an h1..h6 so headings remain unchanged. */
/* Scale non-heading text: mobile-friendly baseline, larger on wide screens */
body :not(h1):not(h2):not(h3):not(h4):not(h5):not(h6) {
  font-size: 1.05rem; /* comfortable on phones */
}

@media (min-width: 900px) {
  body :not(h1):not(h2):not(h3):not(h4):not(h5):not(h6) {
    font-size: 1.5rem; /* larger on laptops/desktops */
  }
}

/* Course chooser styling: fields on the left in two rows, Next button on the right spanning both rows */
#courseChooser {
  display: grid;
  grid-template-columns: 1fr auto;
  grid-template-rows: auto auto;
  gap: 0.25rem 0.75rem;
  align-items: center;
}

#courseChooser .chooser-fields {
  grid-column: 1 / 2;
  grid-row: 1 / 3; /* occupies both rows vertically */
  display: grid;
  grid-template-columns: 1fr;
  gap: 0.25rem;
}

/* Compact numeric inputs for setup: limit to roughly three digits to save horizontal space */
#totalSecInput, #shotsCountInput {
  width: 6ch; /* wider: roughly fits up to 6 digits visually (user requested double) */
  min-width: 6ch;
  max-width: 8ch;
  text-align: right; /* align digits for readability */
}


#courseChooser label { margin: 0; }

/* New row layout: course dropdown + notes aligned horizontally */
#courseChooser .chooser-row {
  display: flex;
  align-items: center; /* vertical alignment between select and notes */
  gap: 0.75rem;
}

#courseChooser .chooser-label { flex: 0 0 auto; margin: 0; }
#courseChooser #courseNotes { flex: 1 1 auto; }


/* Collapsible area that hides the setup/course/device controls by default */
.collapse-toggle {
  display: inline-block;
  margin: 0.5rem 0;
  background: transparent;
  border: none;
  color: #0066cc;
  cursor: pointer;
  font-size: 1rem;
}

/* Make the collapse toggle more visible in dark mode with a lighter blue */
html[data-theme="dark"] .collapse-toggle {
  color: #9fcfff; /* lighter, airy blue for contrast on dark backgrounds */
}
html[data-theme="dark"] .collapse-toggle:hover {
  color: #cfe9ff;
}

#collapsedArea.collapsed { display: none; }
#collapsedArea { margin: 0.5rem 0 1rem 0; padding: 0.5rem; border: 1px dashed rgba(0,0,0,0.08); background: var(--panel-bg); color: var(--text); }
/* .next-row removed; layout now controlled by .buttons and .next-btn */

.course-notes { margin-top: 0.5rem; color: var(--muted); }

/* Course credits styling */
.course-credits { margin-top: 0.5rem; color: var(--muted); font-size: 0.92rem; font-style: italic; }
.course-credits.small { font-size: 0.82rem; }
.course-credits-heading { font-weight: 700; font-style: normal; margin-bottom: 0.25rem; }
.course-credit-item { margin-top: 0.25rem; }
.course-credit-link { margin-left: 0.4rem; font-style: normal; color: var(--primary); text-decoration: underline; }

/* Reset Course top button styling */
.top-new {
  display: inline-block;
  /* Match the theme button sizing so both top buttons align visually */
  padding: 0.35rem 0.6rem;
  margin: 0 0 0.5rem 0;
  font-size: 1rem;
  font-weight: 400; /* keep demure weight */
  background: #0066cc;
  color: #fff;
  border-radius: 6px;
  line-height: 1;
}

.top-theme {
  display: inline-block;
  vertical-align: middle;
  font-weight: 600;
  margin-left: 0.5rem;
}

/* Theme toggle button: visible primary button like Reset Course */
.btn-primary {
  background: var(--primary);
  color: #fff;
  border: none;
  border-radius: 6px;
  cursor: pointer;
}

.top-new, .top-theme-btn {
  display: inline-block;
  vertical-align: middle;
  margin-left: 0.5rem;
  padding: 0.35rem 0.6rem;
  font-size: 1rem;
  line-height: 1;
}

/* When buttons have the .btn-primary class they get the primary background/color */
.top-new.btn-primary:hover, .top-theme-btn.btn-primary:hover,
.btn-primary:hover { filter: brightness(0.95); }
.top-new.btn-primary:focus, .top-theme-btn.btn-primary:focus,
.btn-primary:focus { outline: 3px solid rgba(59,130,246,0.18); outline-offset: 2px; }

/* Buttons layout: stacked on narrow screens, multi-column on wide */
.buttons {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 0.4rem;
}

/* Next button: on wide screens keep it visually separate (full-width above controls)
   but on narrow screens, inline with other control buttons to save vertical space */
.next-btn {
  display: inline-block;
}

@media (min-width: 900px) {
  /* Desktop: show next button as separate (visual spacing rules) */
  .next-btn { margin-bottom: 0.6rem; width: auto; }
}

@media (max-width: 600px) {
  /* Reduce page padding on small devices */
  body { padding: 0.6rem; }


  /* Make control buttons touch-friendly but allow flex layout to control widths */
  .buttons button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    margin: 0.25rem;
    font-size: 1.1rem; /* slightly larger tap target text */
    padding: 0.85rem 0.9rem; /* slightly larger touch area */
    min-height: 48px; /* recommended minimum touch target */
    border-radius: 8px;
  }

  /* On phones, keep Next, Start and Reset on the same line to save vertical space */
  .buttons { display: flex; flex-wrap: nowrap; align-items: center; justify-content: center; }
  .buttons .next-btn, .buttons #startBtn { display: inline-flex; flex: 0 0 auto; width: auto; margin: 0 0.25rem; }
  /* Make equal-width buttons on mobile */
  .btn-equal { min-width: 0; flex: 1 1 0; display: inline-flex; align-items: center; justify-content: center; }
  .btn-equal { padding: 0.85rem 0.9rem; }


/* Desktop: prefer full label and allow the Next button to span full width above controls */
@media (min-width: 900px) {
  /* Desktop: show equal-width primary action buttons centered on one line */
  .buttons { display: flex; gap: 0.6rem; justify-content: center; align-items: center; }
  .btn-equal { flex: 0 0 10rem; display: inline-flex; align-items: center; justify-content: center; }
}

  /* Slightly increase overall base font size on phones */
  body, label, .input-hint, select, input[type="number"], input[type="range"] {
    font-size: 1.1rem;
  }

  /* Make selects and inputs easier to tap */
  select, input[type="number"], input[type="range"] {
    padding: 0.45rem 0.5rem;
  }

  /* Stack course chooser and next button vertically */
  #courseChooser { grid-template-columns: 1fr; grid-template-rows: auto auto; }
  #nextStageBtn { grid-column: 1 / -1; grid-row: 3 / 4; width: 100%; }

  /* Make collapsed area visually tighter */
  #collapsedArea { padding: 0.5rem; }

  /* Stage instructions slightly smaller on phones */
  #stageInstructions { padding: 0.6rem; }

  /* Make the top new button centered on phones */
  /* On phones place theme button at left and Reset Course at right on the same line */
  .top-new { float: right; margin: 0 0 0.6rem 0; font-size: 1.05rem; padding: 0.5rem 0.85rem; min-height: 48px; }
  .top-theme-btn { float: left; margin-left: 0; }
}

/* Improve readability of the setup area on small screens by forcing dark text
   but only when not in dark theme (so dark-mode users keep correct contrast). */
@media (max-width: 600px) {
  html:not([data-theme="dark"]) #collapsedArea,
  html:not([data-theme="dark"]) #collapsedArea label,
  html:not([data-theme="dark"]) #collapsedArea .input-hint,
  html:not([data-theme="dark"]) #collapsedArea select,
  html:not([data-theme="dark"]) #collapsedArea input,
  html:not([data-theme="dark"]) #collapsedArea option,
  html:not([data-theme="dark"]) #collapsedArea #courseNotes {
    color: #000 !important;
  }
  /* range labels and value spans */
  html:not([data-theme="dark"]) #collapsedArea span[id$="Value"] { color: #000 !important; }
}

@media (min-width: 900px) {
  /* On wide screens place Reset Course to the right of the title */
  .top-new { float: right; margin-left: 1rem; }

  /* Buttons are inline but constrained width */
  .buttons button { flex: 0 0 auto; }
}

/* Stage instructions area (large, readable) */
#stageInstructions {
  margin: 1.25rem 0;
  padding: 0.75rem 1rem;
  border: 1px solid rgba(0,0,0,0.08);
  background: var(--panel-bg);
  color: var(--text);
}
#stageInstructions .stage-instructions-inner {
  text-align: center;
}
#stageInstructions #stageTitle {
  font-size: 1.36rem; /* slightly reduced from prior value */
  margin: 0 0 0.25rem 0;
}
#stageInstructions #stageDetails {
  font-size: 1.25rem;
  color: var(--muted);
}

/* Heading lines: stage title, rounds/time, yards/position should be prominent */
#stageInstructions #stageTitle {
  font-size: 1.6rem;
  font-weight: 800;
  margin: 0;
}
#stageInstructions #stageRounds {
  font-size: 1.25rem;
  font-weight: 700;
  color: var(--text);
  margin-top: 0.25rem;
}
#stageInstructions #stageMeta {
  font-size: 1.25rem;
  font-weight: 700;
  color: var(--muted);
  margin-top: 0.25rem;
}

/* Details are slightly less prominent */
#stageInstructions #stageDetails {
  font-size: 1.08rem; /* slightly larger to improve readability of notes */
  color: var(--text);
  margin-top: 0.5rem;
}

/* Course-level instruction block inserted into scoring details */
.course-instructions { font-size: 1.02rem; color: var(--muted); margin-top: 0.6rem; }

/* Stage-mode credits: slightly larger and clearer when shown inside stage details */
.course-credits-stage { font-size: 0.95rem !important; font-style: italic; color: var(--muted); margin-top: 0.4rem; }
.course-credits-stage .course-credits-heading { font-size: 0.95rem; font-weight: 700; margin-bottom: 0.2rem; }
.course-credits-stage .course-credit-item { margin-top: 0.2rem; }

/* Stage meta line (yards and start position) */
#stageInstructions .stage-meta {
  font-size: 1.1rem;
  font-weight: 600;
  color: var(--muted);
  margin: 0.25rem 0 0.5rem 0;
}

/* Make the yards portion slightly larger and accented when present */
#stageInstructions .yard {
  font-size: 1.4rem;
  color: var(--danger);
  font-weight: 700;
  margin-right: 0.5rem;
}

@media (max-width: 600px) {
  #stageInstructions #stageTitle { font-size: 1.2rem; }
  #stageInstructions .yard { font-size: 1.2rem; }
  #stageInstructions #stageDetails { font-size: 1rem; }
}

/* ------------------------------------------------------------------
   Enforce identical sizing for primary action buttons (Next / Start / Reset)
   Add a small, high-specificity override at the end so it wins over earlier
   responsive rules and avoids visual height differences across breakpoints.
   ------------------------------------------------------------------ */
.buttons button, .top-new, .top-theme-btn { box-sizing: border-box; }

.buttons .btn-equal,
.buttons .next-btn,
.buttons #startBtn {
  display: inline-flex !important;
  align-items: center !important;
  justify-content: center !important;
  padding: 0.85rem 0.9rem !important; /* consistent touch area */
  min-height: 48px; /* recommended minimum touch target */
  line-height: 1; /* avoid extra height from line-height inheritance */
  box-sizing: border-box;
}

/* Desktop: keep equal fixed width but preserve the enforced min-height */
@media (min-width: 900px) {
  .buttons .btn-equal,
  .buttons .next-btn { flex: 0 0 10rem; min-width: 10rem; }
}

/* Mobile: allow flexible widths but keep equal height */
@media (max-width: 600px) {
  .buttons .btn-equal,
  .buttons .next-btn { flex: 1 1 0; min-width: 0; }
}

/* Layout for grouped controls: left-controls | action-group | right-controls
   Action group holds the three primary actions and is centered within .buttons.
   Provide horizontal breathing room using side gutters on desktop, and
   allow flexible distribution on mobile while keeping equal widths/heights. */
.buttons { align-items: center; }
.buttons > .left-controls,
.buttons > .right-controls { display: flex; gap: 0.5rem; align-items: center; }
.buttons > .action-group { display: flex; gap: 0.5rem; align-items: center; margin: 0 0.8rem; }

/* Ensure the action-group is centered across the full width of the container */
.buttons { justify-content: center; }
.buttons > .left-controls { margin-right: auto; }
.buttons > .right-controls { margin-left: auto; }

/* Make the three action buttons identical widths on desktop */
@media (min-width: 900px) {
  .action-group .btn-equal { width: 10rem; flex: 0 0 auto; }
}

/* On small screens allow the three action buttons to share available space equally */
@media (max-width: 600px) {
  .action-group { width: 100%; max-width: 560px; }
  .action-group .btn-equal { flex: 1 1 0; min-width: 0; }
}

/* Strong mobile overrides to ensure perfect equality and prevent wrapping */
@media (max-width: 600px) {
  /* Make the group stretch and force each button to exactly the same box */
  .buttons > .action-group { display: flex !important; gap: 0.5rem !important; align-items: stretch !important; }
  .buttons > .action-group > button {
    flex: 1 1 0 !important;
    min-width: 0 !important;
    height: 48px !important;
    padding-left: 0.6rem !important;
    padding-right: 0.6rem !important;
    margin: 0 !important;
    box-sizing: border-box !important;
    display: inline-flex !important;
    align-items: center !important;
    justify-content: center !important;
    white-space: nowrap !important; /* prevent label wrapping */
    overflow: hidden !important;
    text-overflow: ellipsis !important;
  }
}

/* Pixel-perfect alignment: remove per-button margins and set exact heights/box-sizing.
   Use explicit height so all three buttons line up exactly. Padding is kept only for
   horizontal space; vertical size is fixed via height. */
.action-group .btn-equal,
.action-group .next-btn {
  margin: 0 !important; /* remove global button margins */
  box-sizing: border-box !important;
  vertical-align: middle !important;
}

/* Mobile: equal flexible widths, fixed height for consistent touch target */
@media (max-width: 600px) {
  .action-group .btn-equal,
  .action-group .next-btn { height: 48px !important; padding-top: 0 !important; padding-bottom: 0 !important; }
}

/* Desktop: fixed width and slightly taller buttons for visual balance */
@media (min-width: 900px) {
  .action-group .btn-equal,
  .action-group .next-btn { height: 56px !important; padding-top: 0 !important; padding-bottom: 0 !important; }
}

/* Ensure text is centered within fixed-height buttons */
.action-group .btn-equal > *,
.action-group .next-btn > * { line-height: normal; }

/* Increase stage instruction font sizes by 20% (desktop and mobile overrides)
   Appended at the end to ensure these values win over earlier rules. */
#stageInstructions #stageTitle { font-size: 1.92rem; }
#stageInstructions #stageRounds,
#stageInstructions #stageMeta { font-size: 1.5rem; }
#stageInstructions #stageDetails { font-size: 1.26rem; }
#stageInstructions .yard { font-size: 1.68rem; }

@media (max-width: 600px) {
  /* Scale mobile sizes (existing mobile rules are multiplied by 1.2) */
  #stageInstructions #stageTitle { font-size: 1.44rem; }
  #stageInstructions .yard { font-size: 1.44rem; }
  #stageInstructions #stageDetails { font-size: 1.2rem; }
  /* Keep rounds/meta proportionally larger on small screens too */
  #stageInstructions #stageRounds,
  #stageInstructions #stageMeta { font-size: 1.5rem; }
}

/* Tighten vertical spacing between the main clock and the primary button row.
   This reduces the gap so 'Show setup' can fit without forcing the button line
   off-screen on small devices. Keep touch targets unchanged. */
.heading-wrap { margin-bottom: 0.5rem; }
#display { margin: 0.5rem 0 0.6rem 0; }
.collapse-toggle { margin: 0.25rem 0; }
.buttons { margin-top: 0.4rem; }

@media (max-width: 600px) {
  /* Even tighter on phones but keep comfortable spacing for touch */
  .heading-wrap { margin-bottom: 0.35rem; }
  #display { margin: 0.35rem 0 0.45rem 0; }
  .collapse-toggle { margin: 0.15rem 0; }
  .buttons { margin-top: 0.25rem; }
  /* Slightly reduce the gap above shots panel too */
  #shotsPanel { margin-top: 0.5rem; }
}

/* High-specificity enforced sizing for the logo requested by the user.
   Use !important to override earlier rules so the inline SVG renders large
   regardless of other constraints. This forces a 9× visual scale (864px
   baseline) while allowing a larger desktop max via the existing media rule. */
.heading-wrap .logo.svg-logo,
.logo.svg-logo,
.logo-wrap > .logo,
.logo-wrap > .svg-logo {
  width: auto !important;
  height: auto !important;
  max-height: var(--logo-max) !important; /* ~20% of previous huge baseline */
  max-width: none !important; /* don't constrain by container width */
  overflow: visible !important;
}

/* Desktop-specific high-specificity override: force logo to use the desktop max
   when viewport is wide. This helps ensure the SVG grows to the desired size
   on large screens even if other rules attempt to constrain it. */
@media (min-width: 900px) {
  .heading-wrap .logo.svg-logo,
  .logo.svg-logo,
  .logo-wrap > .logo,
  .logo-wrap > .svg-logo {
    max-height: var(--logo-max-desktop) !important;
    overflow: visible !important;
  }
}

/* Enforce exact logo width per device type:
   - Phones (<600px): 200px wide
   - Tablet/Desktop (>=600px): 400px wide
   Use high-specificity selectors and !important so these rules win over
   previous max-height / responsive constraints. Height is auto to preserve
   SVG aspect ratio. */
@media (max-width: 599px) {
  .heading-wrap .logo.svg-logo,
  .logo.svg-logo,
  .logo-wrap > .logo,
  .logo-wrap > .svg-logo {
    width: 150px !important;
    height: auto !important;
    max-width: none !important;
    max-height: none !important;
    overflow: visible !important;
  }
}

@media (min-width: 600px) {
  .heading-wrap .logo.svg-logo,
  .logo.svg-logo,
  .logo-wrap > .logo,
  .logo-wrap > .svg-logo {
    width: 200px !important;
    height: auto !important;
    max-width: none !important;
    max-height: none !important;
    overflow: visible !important;
  }
}

/* Footer (fine-print) */
.site-footer {
  /* Provide more breathing room from the content above. Increase on
     narrow screens so expanding tables don't push the footer up too close. */
  margin-top: 2.5rem;
  padding: 0.6rem 0;
  text-align: center;
  color: var(--muted);
  font-size: 0.85rem;
  background: transparent;
}

@media (max-width: 600px) {
  /* Slightly larger gap on phones where content tends to be longer/stacked */
  .site-footer { margin-top: 3.5rem; padding-top: 0.8rem; }
}
.site-footer .site-footer-inner { display: inline-block; max-width: 96%; }

